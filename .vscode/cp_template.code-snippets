{
	// Place your CodeForces Problems workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Competitive Programming Template": {
		"scope": "cpp",
		"prefix": "cptemplate",
		"body": [
			"#include <iostream>",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"#define ll long long",
			"#define YES cout << \"YES\" << endl",
			"#define NO cout << \"NO\" << endl",
			"#define vll vector<long long>",
			"#define endl \"\\n\"",
			"#define int ll",
			"#define pb push_back",
			"",
			"const int MOD = 1e9 + 7;",
			"const int RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();",
			"",
			"struct chash { // To use most bits rather than just the lowest ones:",
			"    int MUL = 1e9 + 3;",
			"    int operator()(int x) const { return std::hash<ll>{}((x ^ RANDOM) % MOD * MUL); }",
			"};",
			"",
			"int gcd(int a, int b)",
			"{",
			"    if (!a || !b)",
			"        return a | b;",
			"    unsigned shift = __builtin_ctz(a | b);",
			"    a >>= __builtin_ctz(a);",
			"    do",
			"    {",
			"        b >>= __builtin_ctz(b);",
			"        if (a > b)",
			"            swap(a, b);",
			"        b -= a;",
			"    } while (b);",
			"    return a << shift;",
			"}",
			"",
			"int lcm(int a, int b)",
			"{",
			"    return a / gcd(a, b) * b;",
			"}",
			"",
			"int lcm(vll a)",
			"{",
			"    int result = 1;",
			"    for (int i = 0; i < a.size(); i++)",
			"    {",
			"        result = lcm(result, a[i]);",
			"    }",
			"    return result;",
			"}",
			"",
			"int checkAndIncrement(int x) {",
			"    if (x - floor(x) > 0) {",
			"        return x + 1;",
			"    } else {",
			"        return x;",
			"    }",
			"}",
			"",
			"vector<long long> primeFactors(long long n) {",
			"    vector<long long> factorization;",
			"    for (long long d = 2; d * d <= n; d++) {",
			"        while (n % d == 0) {",
			"            factorization.push_back(d);",
			"            n /= d;",
			"        }",
			"    }",
			"    if (n > 1)",
			"        factorization.push_back(n);",
			"    return factorization;",
			"}",
			"",
			"// ____________________________________________________________________________________________________________",
			"// ____________________________________________________________________________________________________________",
			"",
			"",
			"void TheSlothThatCodes()",
			"{",
			"    $1",
			"}",
			"",
			"",
			"",
			"// ____________________________________________________________________________________________________________",
			"// ____________________________________________________________________________________________________________",
			"",
			"",
			"int32_t main()",
			"{",
			"    ios_base::sync_with_stdio(false);",
			"    cin.tie(NULL);",
			"",
			"    int c;",
			"    cin >> c;",
			"    while (c--)",
			"    {",
			"        TheSlothThatCodes();",
			"    }",
			"",
			"    return 0;",
			"}"
		],
		"description": "Basic template for competitive programming"
	}
}